// admin
model = [
  {
    key: "_id",
    dataType: "Number",
    description: "Auto-incremented unique identifier for each admin",
    example: "1",
    type: "admin",
  },
  {
    key: "name",
    dataType: "String",
    description: "The name of the admin",
    example: '"John Doe"',
    type: "admin",
  },
  {
    key: "role",
    dataType: "String",
    description: "The role assigned to the admin, defaulting to 'support'",
    example: '"admin"',
    type: "admin",
    default: "support",
  },
  {
    key: "countryCode",
    dataType: "String",
    description:
      "The country code for the admin's mobile number, defaulting to '+91'",
    example: "'+91'",
    type: "admin",
    default: "+91",
  },
  {
    key: "mobile",
    dataType: "String",
    description: "The mobile number of the admin",
    example: '"9876543210"',
    type: "admin",
  },
  {
    key: "email",
    dataType: "String",
    description: "The email address of the admin",
    example: '"admin@example.com"',
    type: "admin",
  },
  {
    key: "password",
    dataType: "String",
    description: "The password for the admin's account (typically hashed)",
    example: '"hashed_password"',
    type: "admin",
  },
  {
    key: "lastLogin",
    dataType: "Date",
    description: "The date and time of the admin's last login",
    example: 'ISODate("2021-06-10T12:30:00Z")',
    type: "admin",
  },
  {
    key: "wallet",
    dataType: "Number",
    description: "The current balance in the admin's wallet, defaulting to 0",
    example: "100",
    type: "admin",
    default: 0,
  },
  {
    key: "walletLogs",
    dataType: "Array",
    description: "An array of wallet log entries detailing billing actions",
    example:
      '[{ billingAction: "add funds", billingType: "credit", amount: 50 }]',
    type: "admin",
    details: [
      {
        key: "billingAction",
        dataType: "String",
        description: "Description of the billing action",
        example: "add funds",
      },
      {
        key: "billingType",
        dataType: "String (enum)",
        description: "Type of billing action, either 'credit' or 'debit'",
        example: "credit",
      },
      {
        key: "amount",
        dataType: "Number",
        description: "Amount involved in the billing action",
        example: 50,
      },
    ],
  },
  {
    key: "isSuperAdmin",
    dataType: "Boolean",
    description:
      "Flag indicating if the admin has super admin privileges, defaulting to false",
    example: "true",
    type: "admin",
    default: false,
  },
  {
    key: "isActive",
    dataType: "Boolean",
    description:
      "Flag indicating if the admin's account is active, defaulting to true",
    example: "true",
    type: "admin",
    default: true,
  },
  {
    key: "isDeleted",
    dataType: "Boolean",
    description:
      "Flag indicating if the admin's account is deleted, defaulting to false",
    example: "false",
    type: "admin",
    default: false,
  },
  {
    key: "logo",
    dataType: "String",
    description: "URL or path of the admin's portal logo",
    example: '"/images/admin-logo.png"',
    type: "admin",
  },
  {
    key: "accessibleUserIds",
    dataType: "Array",
    description: "List of user IDs that the admin can access",
    example: "[1, 2, 3]",
    type: "admin",
  },
  {
    key: "contact",
    dataType: "Object",
    description: "Contact information for the admin",
    example:
      '{ "sales": "sales@example.com", "support": "support@example.com" }',
    type: "admin",
    details: [
      {
        key: "sales",
        dataType: "String",
        description: "Contact details for sales",
        example: "sales@example.com",
      },
      {
        key: "support",
        dataType: "String",
        description: "Contact details for support",
        example: "support@example.com",
      },
    ],
  },
  {
    key: "createdAt",
    dataType: "Date",
    description: "Timestamp when the admin document was created",
    example: 'ISODate("2021-06-10T12:00:00Z")',
    type: "admin",
  },
  {
    key: "updatedAt",
    dataType: "Date",
    description: "Timestamp when the admin document was last updated",
    example: 'ISODate("2021-06-10T12:30:00Z")',
    type: "admin",
  },
  {
    timestamp: "timestamps",
    default_value: true,
    desc: "Automatically adds createdAt and updatedAt fields to the schema.",
  },
];

// adminUserlog
model = [
  {
    key: "url",
    dataType: "String",
    description: "The URL associated with the log entry.",
    example: "https://example.com/api/resource",
    type: "adminuserlog",
  },
  {
    key: "method",
    dataType: "String",
    description: "The HTTP method used in the request.",
    example: "GET",
    type: "adminuserlog",
  },
  {
    key: "payload",
    dataType: "Object",
    description: "The payload or data sent with the request.",
    example: '{ "key": "value" }',
    type: "adminuserlog",
  },
  {
    key: "response",
    dataType: "Object",
    description: "The response received from the server.",
    example: '{ "status": 200, "data": { ... } }',
    type: "adminuserlog",
  },
  {
    key: "description",
    dataType: "String",
    description: "Additional information or description about the log entry.",
    example: "This is a sample log entry.",
    type: "adminuserlog",
  },
  {
    key: "userInfo",
    dataType: "Object",
    description: "Information about the user associated with the log entry.",
    example: '{ "userId": 123, "username": "John" }',
    type: "adminuserlog",
  },
];

// billing

const billingSchemaArray = [
  {
    id: 1,
    key: "id",
    dataType: "Number",
    description: "Auto incremented id",
    example: 1,
    type: "billing",
  },
  {
    id: 2,
    key: "customerId",
    dataType: "mongoose.Schema.Types.ObjectId",
    description: "Customer ID",
    example: "60d0fe4f5311236168a109ca",
    default: null,
    type: "billing",
  },
  {
    id: 3,
    key: "customerEmail",
    dataType: "String",
    description: "Customer Email",
    example: "customer@example.com",
    type: "billing",
  },
  {
    id: 4,
    key: "partnerId",
    dataType: "mongoose.Schema.Types.ObjectId",
    description: "Partner ID",
    example: "60d0fe4f5311236168a109cb",
    default: null,
    type: "billing",
  },
  {
    id: 5,
    key: "partnerEmail",
    dataType: "String",
    description: "Partner Email",
    example: "partner@example.com",
    type: "billing",
  },
  {
    id: 6,
    key: "action",
    dataType: "String",
    description: "Action performed either related to subscription or credit",
    example: "Create new Subscription",
    type: "billing",
  },
  {
    id: 7,
    key: "adminStartingBalance",
    dataType: "Number",
    description: "Admin's starting balance",
    example: 1000,
    type: "billing",
  },
  {
    id: 8,
    key: "partnerStartingBalance",
    dataType: "Number",
    description: "Partner's starting balance",
    example: 500,
    type: "billing",
  },
  {
    id: 9,
    key: "billNumber",
    dataType: "String",
    description: "Bill number",
    example: "INV-123456",
    type: "billing",
  },
  {
    id: 10,
    key: "previousData",
    dataType: "String",
    description: "Previous data",
    example: "Old data before change",
    type: "billing",
  },
  {
    id: 11,
    key: "currentChange",
    dataType: "String",
    description: "Current change data",
    example: "New data after change",
    type: "billing",
  },
  {
    id: 12,
    key: "stage",
    dataType: "String",
    description: "Stage of billing process",
    example: "Processed",
    type: "billing",
  },
  {
    id: 13,
    key: "subId",
    dataType: "String",
    description: "Subscription ID",
    example: "SUB-123456",
    type: "billing",
  },
  {
    id: 14,
    key: "credit",
    dataType: "Number",
    description: "Credit amount",
    example: 100,
    default: 0,
    type: "billing",
  },
  {
    id: 15,
    key: "debit",
    dataType: "Number",
    description: "Debit amount",
    example: 50,
    default: 0,
    type: "billing",
  },
  {
    id: 16,
    key: "description",
    dataType: "String",
    description: "Description of the billing action or related to subscription",
    example: "Monthly subscription payment",
    type: "billing",
  },
  {
    id: 17,
    key: "createdBy",
    dataType: "String",
    description: "It specifies who's created bill",
    example: "admin@example.com",
    type: "billing",
  },
  {
    id: 18,
    key: "descriptionByAdmin",
    dataType: "String",
    description: "Description provided by admin",
    example: "Admin's note on the billing",
    type: "billing",
  },
  {
    id: 19,
    key: "billingType",
    dataType: "String",
    description: "Type of billing",
    example: "Subscription",
    type: "billing",
  },
  {
    id: 20,
    key: "remark",
    dataType: "String",
    description: "Additional remark",
    example: "Special discount applied",
    type: "billing",
  },
  {
    id: 21,
    key: "mrrMovement",
    dataType: "Number",
    description: "Monthly Recurring Revenue movement",
    example: 20000,
    type: "billing",
  },
  {
    id: 22,
    key: "subValue",
    dataType: "Number",
    description: "Subscription value",
    example: 1200,
    type: "billing",
  },
  {
    id: 23,
    key: "orderId",
    dataType: "String",
    description: "Order ID generated",
    example: "ORD-123456",
    default: null,
    type: "billing",
  },
  {
    id: 24,
    key: "creditBack",
    dataType: "Object",
    description: "Credit back details",
    example: '{ "addOnPrice": 10, "planPrice": 100 }',
    type: "billing",
    details: [
      {
        key: "addOnPrice",
        dataType: "Number",
        description:
          "It specify Add on Price if user requires some extra feature",
        example: 20910,
      },
      {
        key: "planPrice",
        dataType: "Number",
        description: "Plan price that choose's by user.",
        example: 10089,
      },
    ],
  },
  {
    id: 25,
    key: "isActive",
    dataType: "Boolean",
    description: "Whether the billing entry is active",
    example: false,
    default: true,
    type: "billing",
  },
  {
    id: 26,
    key: "isDeleted",
    dataType: "Boolean",
    description: "Whether the billing entry is deleted",
    example: true,
    default: false,
    type: "billing",
  },
  {
    id: 27,
    timestamp: "timestamps",
    default_value: true,
    desc: "Automatically adds createdAt and updatedAt fields to the schema.",
    type: "billing",
  },
];

// customer

const customerSchemaArray = [
  {
    id: 1,
    key: "name",
    dataType: "String",
    description: "Name of the customer",
    example: "John Doe",
    type: "customer",
  },
  {
    id: 2,
    key: "mobile",
    dataType: "String",
    description: "Mobile number of the customer",
    example: "9876543210",
    type: "customer",
  },
  {
    id: 3,
    key: "email",
    dataType: "String",
    description: "Email address of the customer",
    example: "john.doe@example.com",
    type: "customer",
  },
  {
    id: 4,
    key: "country",
    dataType: "String",
    description: "Country of the customer",
    example: "India",
    default: "india",
    type: "customer",
  },
  {
    id: 5,
    key: "countryCode",
    dataType: "String",
    description: "Country code for the customer's mobile number",
    example: "+91",
    default: "+91",
    type: "customer",
  },
  {
    id: 6,
    key: "companyName",
    dataType: "String",
    description: "Company name of the customer",
    example: "Acme Corp",
    type: "customer",
  },
  {
    id: 7,
    key: "gstIn",
    dataType: "String",
    description: "GST identification number",
    example: "22AAAAA0000A1Z5",
    type: "customer",
  },
  {
    id: 8,
    key: "partnerId",
    dataType: "mongoose.Schema.Types.ObjectId",
    description: "ID of the associated partner",
    example: "60d0fe4f5311236168a109ca",
    default: null,
    type: "customer",
  },
  {
    id: 9,
    key: "password",
    dataType: "String",
    description: "Password for the customer's account",
    example: "hashed_password",
    type: "customer",
  },
  {
    id: 10,
    key: "createdBy",
    dataType: "String (enum)",
    description:
      "Indicates who created the customer record, either self or by partner",
    example: "partner",
    default: "self",
    type: "customer",
  },
  {
    id: 11,
    key: "lastLogin",
    dataType: "Date",
    description: "Last login date of the customer",
    example: "2023-01-15T10:00:00Z",
    type: "customer",
  },
  {
    id: 12,
    key: "label",
    dataType: "Object",
    description: "Label information for the customer",
    example:
      '{ "id": "60d0fe4f5311236168a109cb", "name": "VIP", "color": "red" }',
    details: [
      {
        key: "id",
        dataType: "mongoose.Schema.Types.ObjectId",
        description: "ID of the label",
        example: "60d0fe4f5311236168a109cb",
      },
      {
        key: "name",
        dataType: "String",
        description: "Name of the label",
        example: "VIP",
      },
      {
        key: "color",
        dataType: "String",
        description: "Color of the label",
        example: "red",
      },
    ],
    type: "customer",
  },
  {
    id: 13,
    key: "activityLogs",
    dataType: "Array",
    description: "Activity log entries detailing updates",
    example: '[{ "updatedBy": "admin", "updateDate": "2023-01-15T10:00:00Z" }]',
    details: [
      {
        key: "updatedBy",
        dataType: "String",
        description: "Who updated the record",
        example: "admin",
      },
      {
        key: "updateDate",
        dataType: "Date",
        description: "Date of the update",
        example: "2023-01-15T10:00:00Z",
      },
    ],
    type: "customer",
  },
  {
    id: 14,
    key: "billing",
    dataType: "Object",
    description: "Billing information for the customer",
    example:
      '{ "name": "John Doe", "mobile": "9876543210", "email": "john.doe@example.com", "address": "123 Main St", "pinCode": "123456", "gstInNo": "22AAAAA0000A1Z5", "panCardNo": "ABCDE1234F", "organizationType": "Private", "companyName": "Acme Corp", "city": "New York", "state": "NY", "country": "USA", "gstTreatment": "Regular", "registeredCompanyName": "Acme Corporation" }',
    details: [
      {
        key: "name",
        dataType: "String",
        description: "Billing name",
        example: "John Doe",
      },
      {
        key: "mobile",
        dataType: "String",
        description: "Billing mobile number",
        example: "9876543210",
      },
      {
        key: "email",
        dataType: "String",
        description: "Billing email",
        example: "john.doe@example.com",
      },
      {
        key: "address",
        dataType: "String",
        description: "Billing address",
        example: "123 Main St",
      },
      {
        key: "pinCode",
        dataType: "String",
        description: "Billing pin code",
        example: "123456",
      },
      {
        key: "gstInNo",
        dataType: "String",
        description: "Billing GST number",
        example: "22AAAAA0000A1Z5",
      },
      {
        key: "panCardNo",
        dataType: "String",
        description: "Billing PAN card number",
        example: "ABCDE1234F",
      },
      {
        key: "organizationType",
        dataType: "String",
        description: "Organization type",
        example: "Private",
      },
      {
        key: "companyName",
        dataType: "String",
        description: "Billing company name",
        example: "Acme Corp",
      },
      {
        key: "city",
        dataType: "String",
        description: "Billing city",
        example: "New York",
      },
      {
        key: "state",
        dataType: "String",
        description: "Billing state",
        example: "NY",
      },
      {
        key: "country",
        dataType: "String",
        description: "Billing country",
        example: "USA",
      },
      {
        key: "gstTreatment",
        dataType: "String",
        description: "GST treatment",
        example: "Regular",
      },
      {
        key: "registeredCompanyName",
        dataType: "String",
        description: "Registered company name",
        example: "Acme Corporation",
      },
    ],
    type: "customer",
  },
  {
    id: 15,
    key: "salesPersonId",
    dataType: "mongoose.Schema.Types.ObjectId",
    description: "ID of the associated salesperson",
    example: "60d0fe4f5311236168a109cc",
    default: null,
    type: "customer",
  },
  {
    id: 16,
    key: "isInstanceUser",
    dataType: "Boolean",
    description: "Indicates if the customer is an instance user",
    example: false,
    default: false,
    type: "customer",
  },
  {
    id: 17,
    key: "isMobileVerified",
    dataType: "Boolean",
    description: "Indicates if the customer's mobile number is verified",
    example: false,
    default: false,
    type: "customer",
  },
  {
    id: 18,
    key: "isBillInfoVerified",
    dataType: "Boolean",
    description: "Indicates if the customer's billing information is verified",
    example: false,
    default: false,
    type: "customer",
  },
  {
    id: 19,
    key: "isVerified",
    dataType: "Boolean",
    description: "Indicates if the customer's account is verified",
    example: false,
    default: false,
    type: "customer",
  },
  {
    id: 20,
    key: "isActive",
    dataType: "Boolean",
    description: "Indicates if the customer's account is active",
    example: true,
    default: true,
    type: "customer",
  },
  {
    id: 21,
    key: "isDeleted",
    dataType: "Boolean",
    description: "Indicates if the customer's account is deleted",
    example: false,
    default: false,
    type: "customer",
  },
  {
    id: 22,
    key: "freeSubscriptionUsesCount",
    dataType: "Number",
    description: "Number of free subscription uses",
    example: 0,
    default: 0,
    type: "customer",
  },
];

// customerLog

const customerLogSchemaArray = [
  {
    id: 1,
    key: "url",
    dataType: "String",
    description: "The URL accessed by the customer",
    example: "https://api.example.com/resource",
    type: "customerlog",
  },
  {
    id: 2,
    key: "method",
    dataType: "String",
    description: "The HTTP method used in the request",
    example: "GET",
    type: "customerlog",
  },
  {
    id: 3,
    key: "payload",
    dataType: "Object",
    description: "The request payload sent by the customer",
    example: '{ "key": "value" }',
    type: "customerlog",
  },
  {
    id: 4,
    key: "response",
    dataType: "Object",
    description: "The response received from the server",
    example: '{ "status": "success", "data": { "id": 1 } }',
    type: "customerlog",
  },
  {
    id: 5,
    key: "description",
    dataType: "String",
    description: "Description of the log entry",
    example: "Customer accessed the resource endpoint",
    type: "customerlog",
  },
  {
    id: 6,
    key: "userInfo",
    dataType: "Object",
    description: "Information about the customer who made the request",
    example: '{ "userId": "60d0fe4f5311236168a109ca", "userName": "john_doe" }',
    type: "customerlog",
  },
  {
    id: 7,
    timestamp: "timestamps",
    default_value: true,
    desc: "Automatically adds createdAt and updatedAt fields to the schema.",
    type: "customerlog",
  },
];

// customerReport

const customerReportSchemaArray = [
  {
    id: 1,
    key: "source",
    dataType: "String",
    description: "The source of the customer report",
    example: "Google",
    type: "customerreport",
  },
  {
    id: 2,
    key: "utmMedium",
    dataType: "String",
    description: "The UTM medium parameter",
    example: "email",
    type: "customerreport",
  },
  {
    id: 3,
    key: "utmCampaign",
    dataType: "String",
    description: "The UTM campaign parameter",
    example: "summer_sale",
    type: "customerreport",
  },
  {
    id: 4,
    key: "utmContent",
    dataType: "String",
    description: "The UTM content parameter",
    example: "banner_ad",
    type: "customerreport",
  },
  {
    id: 5,
    key: "utmTerm",
    dataType: "String",
    description: "The UTM term parameter",
    example: "shoes",
    type: "customerreport",
  },
  {
    id: 6,
    key: "name",
    dataType: "String",
    description: "Name of the customer",
    example: "John Doe",
    type: "customerreport",
  },
  {
    id: 7,
    key: "email",
    dataType: "String",
    description: "Email address of the customer",
    example: "john.doe@example.com",
    type: "customerreport",
  },
  {
    id: 8,
    key: "mobile",
    dataType: "String",
    description: "Mobile number of the customer",
    example: "9876543210",
    type: "customerreport",
  },
  {
    id: 9,
    key: "isMobileVerified",
    dataType: "Boolean",
    description: "Indicates if the customer's mobile number is verified",
    example: false,
    default: false,
    type: "customerreport",
  },
  {
    id: 10,
    key: "isTrialCreated",
    dataType: "Boolean",
    description: "Indicates if a trial account is created",
    example: false,
    default: false,
    type: "customerreport",
  },
  {
    id: 11,
    key: "isOnBoardingComplete",
    dataType: "Boolean",
    description: "Indicates if onboarding is complete",
    example: false,
    default: false,
    type: "customerreport",
  },
  {
    id: 12,
    key: "plan",
    dataType: "Object",
    description: "Plan details",
    example:
      '{ "name": "Pro Plan", "noOfUsers": 5, "unitPrice": 10, "price": 50, "description": "Pro plan with additional features", "billingCycle": "monthly", "billEvery": 1 }',
    details: [
      {
        key: "name",
        dataType: "String",
        description: "Plan name",
        example: "Pro Plan",
      },
      {
        key: "noOfUsers",
        dataType: "Number",
        description: "Number of users in the plan",
        example: 5,
      },
      {
        key: "unitPrice",
        dataType: "Number",
        description: "Unit price of the plan",
        example: 10,
      },
      {
        key: "price",
        dataType: "Number",
        description: "Total price of the plan",
        example: 50,
      },
      {
        key: "description",
        dataType: "String",
        description: "Description of the plan",
        example: "Pro plan with additional features",
      },
      {
        key: "billingCycle",
        dataType: "String",
        description: "Billing cycle of the plan",
        example: "monthly",
      },
      {
        key: "billEvery",
        dataType: "Number",
        description: "Billing interval",
        example: 1,
      },
    ],
    type: "customerreport",
  },
  {
    id: 13,
    key: "subCode",
    dataType: "String",
    description: "Subscription code",
    example: "SUB123456",
    type: "customerreport",
  },
  {
    id: 14,
    key: "expiryDate",
    dataType: "Date",
    description: "Expiry date of the subscription",
    example: "2023-12-31",
    default: null,
    type: "customerreport",
  },
  {
    id: 15,
    key: "lastLogin",
    dataType: "Date",
    description: "Last login date of the customer",
    example: "2023-01-15T10:00:00Z",
    default: null,
    type: "customerreport",
  },
  {
    id: 16,
    key: "pipeDriveUrl",
    dataType: "String",
    description: "PipeDrive URL for the customer",
    example: "https://pipedrive.com/deal/123",
    type: "customerreport",
  },
  {
    id: 17,
    key: "pipeDriveStage",
    dataType: "String",
    description: "PipeDrive stage of the customer",
    example: "Negotiation",
    type: "customerreport",
  },
  {
    id: 18,
    key: "pipeDriveSalesPerson",
    dataType: "String",
    description: "Salesperson handling the customer",
    example: "Jane Smith",
    type: "customerreport",
  },
  {
    id: 19,
    key: "pipeDriveStatus",
    dataType: "String",
    description: "PipeDrive status of the customer",
    example: "Active",
    type: "customerreport",
  },
  {
    id: 20,
    key: "customerId",
    dataType: "mongoose.Schema.Types.ObjectId",
    description: "Customer ID",
    example: "60d0fe4f5311236168a109ca",
    default: null,
    type: "customerreport",
  },
  {
    id: 21,
    timestamp: "timestamps",
    default_value: true,
    desc: "Automatically adds createdAt and updatedAt fields to the schema.",
    type: "customerreport",
  },
];

// instance

const instanceSchemaArray = [
  {
    id: 1,
    key: "id",
    dataType: "Number",
    description: "Auto-incremented ID",
    example: 1,
    type: "instance",
  },
  {
    id: 2,
    key: "title",
    dataType: "String",
    description: "Title of the instance",
    example: "Instance Title",
    default: "",
    type: "instance",
  },
  {
    id: 3,
    key: "drive",
    dataType: "String",
    description: "Drive associated with the instance",
    example: "Drive Name",
    type: "instance",
  },
  {
    id: 4,
    key: "ip",
    dataType: "String",
    description: "IP address of the instance",
    example: "192.168.1.1",
    type: "instance",
  },
  {
    id: 5,
    key: "noOfUsers",
    dataType: "Number",
    description: "Number of users",
    example: 10,
    default: 0,
    type: "instance",
  },
  {
    id: 6,
    key: "subId",
    dataType: "String",
    description: "Subscription ID",
    example: "SUB-123456",
    type: "instance",
  },
  {
    id: 7,
    key: "createdBy",
    dataType: "String",
    description: "Creator of the instance",
    example: "admin@example.com",
    type: "instance",
  },
  {
    id: 8,
    key: "forCustomer",
    dataType: "Number",
    description: "Customer ID",
    example: 123,
    default: 0,
    type: "instance",
  },
  {
    id: 9,
    key: "sorting",
    dataType: "String",
    description: "Sorting criteria",
    example: "name",
    type: "instance",
  },
  {
    id: 10,
    key: "userId",
    dataType: "Number",
    description: "User ID",
    example: 1,
    type: "instance",
  },
  {
    id: 11,
    key: "statusId",
    dataType: "Number",
    description: "Status ID",
    example: 1,
    type: "instance",
  },
  {
    id: 12,
    key: "serverId",
    dataType: "Number",
    description: "Server ID",
    example: 1,
    type: "instance",
  },
  {
    id: 13,
    key: "expiryDate",
    dataType: "Date",
    description: "Expiry date of the instance",
    example: "2023-12-31",
    type: "instance",
  },
  {
    id: 14,
    key: "tallyVersion",
    dataType: "String",
    description: "Tally version that is operated by user",
    example: "Tally 9",
    type: "instance",
  },
  {
    id: 15,
    key: "planName",
    dataType: "String",
    description: "Plan name  that is selected by user",
    example: "Basic Plan",
    type: "instance",
  },
  {
    id: 16,
    key: "partnerName",
    dataType: "String",
    description: "Partner name",
    example: "Partner A",
    type: "instance",
  },
  {
    id: 17,
    key: "skipInAuto",
    dataType: "Boolean",
    description: "Whether to skip in auto processing or not",
    example: false,
    default: false,
    type: "instance",
  },
  {
    id: 18,
    key: "isActive",
    dataType: "Boolean",
    description: "Whether the instance is active or not",
    example: true,
    default: true,
    type: "instance",
  },
  {
    id: 19,
    key: "isDeleted",
    dataType: "Boolean",
    description: "Whether the instance is deleted or not",
    example: false,
    default: false,
    type: "instance",
  },
  {
    id: 20,
    key: "isTrialInstance",
    dataType: "Boolean",
    description: "Whether the instance is a trial instance",
    example: false,
    default: false,
    type: "instance",
  },
  {
    id: 21,
    key: "trialToPaid",
    dataType: "Boolean",
    description: "Whether the trial instance is converted to paid",
    example: false,
    default: false,
    type: "instance",
  },
  {
    id: 22,
    key: "isMargInstance",
    dataType: "Boolean",
    description: "Whether the instance is a Marg instance",
    example: false,
    default: false,
    type: "instance",
  },
  {
    id: 23,
    key: "serverName",
    dataType: "String",
    description: "Server name",
    example: "Server A",
    type: "instance",
  },
  {
    id: 24,
    key: "companyName",
    dataType: "String",
    description: "Company name",
    example: "Company ABC",
    type: "instance",
  },
  {
    id: 25,
    key: "customerEmail",
    dataType: "String",
    description: "Customer email",
    example: "customer@example.com",
    type: "instance",
  },
  {
    id: 26,
    key: "subscription",
    dataType: "Object",
    description: "Subscription details",
    example: "{...}",
    type: "instance",
  },
  {
    id: 27,
    timestamp: "timestamps",
    dataType: "Boolean",
    desc: "Automatically adds createdAt and updatedAt fields to the schema.",
    default_value: true,
    type: "instance",
  },
];

// instanceLog
const instanceLogSchemaArray = [
  {
    id: 1,
    key: "id",
    dataType: "Number",
    description: "Auto-incremented ID",
    example: 1,
    type: "instanceLog",
  },
  {
    id: 2,
    key: "status",
    dataType: "String",
    description: "Status of the instance log",
    example: "active",
    type: "instanceLog",
  },
  {
    id: 3,
    key: "hostName",
    dataType: "String",
    description: "Host name of the instance",
    example: "host123",
    type: "instanceLog",
  },
  {
    id: 4,
    key: "userName",
    dataType: "String",
    description: "User name of the instance",
    example: "user123",
    type: "instanceLog",
  },
  {
    id: 5,
    key: "actionType",
    dataType: "String",
    description: "Type of action performed by user",
    example: "login",
    enum: ["login", "logout"],
    type: "instanceLog",
  },
  {
    id: 6,
    key: "loginDate",
    dataType: "String",
    description: "Login date of user",
    example: "2023-01-01",
    type: "instanceLog",
  },
  {
    id: 7,
    key: "loginTime",
    dataType: "String",
    description: "Login time of user",
    example: "10:00 AM",
    type: "instanceLog",
  },
  {
    id: 8,
    key: "logoutDate",
    dataType: "String",
    description: "Logout date of user",
    example: "2023-01-01",
    type: "instanceLog",
  },
  {
    id: 9,
    key: "logoutTime",
    dataType: "String",
    description: "Logout time of user",
    example: "5:00 PM",
    type: "instanceLog",
  },
  {
    id: 10,
    key: "userEnabled",
    dataType: "Boolean",
    description: "Whether the user is enabled",
    example: true,
    type: "instanceLog",
  },
  {
    id: 11,
    key: "sessionType",
    dataType: "String",
    description: "Type of session operated by user",
    example: "remote",
    type: "instanceLog",
  },
  {
    id: 12,
    key: "sessionId",
    dataType: "String",
    description: "Session ID",
    example: "session123",
    type: "instanceLog",
  },
  {
    id: 13,
    key: "sessionClientName",
    dataType: "String",
    description: "Session client name",
    example: "client123",
    type: "instanceLog",
  },
  {
    id: 14,
    key: "sessionIPAddress",
    dataType: "String",
    description: "Session IP address",
    example: "192.168.1.1",
    type: "instanceLog",
  },
  {
    id: 15,
    key: "state",
    dataType: "String",
    description: "State of the instance",
    example: "active",
    type: "instanceLog",
  },
  {
    id: 16,
    key: "idletime",
    dataType: "String",
    description: "Idle time of the session",
    example: "30 minutes",
    type: "instanceLog",
  },
  {
    id: 17,
    timestamp: "timestamps",
    dataType: "Boolean",
    desc: "Automatically adds createdAt and updatedAt fields to the schema.",
    default_value: true,
    type: "instanceLog",
  },
];

// instanceUser

const instanceUserSchemaArray = [
  {
    id: 1,
    key: "id",
    dataType: "Number",
    description: "Auto-incremented ID",
    example: 1,
    type: "instanceUser",
  },
  {
    id: 2,
    key: "userName",
    dataType: "String",
    description: "User name",
    example: "user123",
    type: "instanceUser",
  },
  {
    id: 3,
    key: "userKey",
    dataType: "String",
    description: "User key",
    example: "key123",
    type: "instanceUser",
  },
  {
    id: 4,
    key: "instanceId",
    dataType: "mongoose.Schema.Types.ObjectId",
    description: "Instance ID",
    example: "60d0fe4f5311236168a109ca",
    type: "instanceUser",
  },
  {
    id: 5,
    key: "userId",
    dataType: "mongoose.Schema.Types.ObjectId",
    description: "User ID",
    example: "60d0fe4f5311236168a109cb",
    type: "instanceUser",
  },
  {
    id: 6,
    key: "isActive",
    dataType: "Boolean",
    description: "Whether the instance user is active",
    example: true,
    default: true,
    type: "instanceUser",
  },
  {
    id: 7,
    key: "userDisplayName",
    dataType: "String",
    description: "User display name",
    example: "John Doe",
    type: "instanceUser",
  },
  {
    id: 8,
    key: "email",
    dataType: "String",
    description: "Email address",
    example: "user@example.com",
    type: "instanceUser",
  },
  {
    id: 9,
    key: "mobile",
    dataType: "String",
    description: "Mobile number",
    example: "9876543210",
    type: "instanceUser",
  },
  {
    id: 10,
    key: "isHtmlLogin",
    dataType: "Boolean",
    description: "Indicates if HTML login is enabled",
    example: true,
    default: true,
    type: "instanceUser",
  },
  {
    id: 11,
    key: "lastLogin",
    dataType: "Date",
    description: "Date of the last login",
    example: "2023-01-01T10:00:00Z",
    type: "instanceUser",
  },
  {
    id: 12,
    key: "lastLogout",
    dataType: "Date",
    description: "Date of the last logout",
    example: "2023-01-01T18:00:00Z",
    type: "instanceUser",
  },
  {
    id: 13,
    key: "sysStatus",
    dataType: "Boolean",
    description: "System status",
    example: false,
    default: false,
    type: "instanceUser",
  },
  {
    id: 14,
    key: "isDeleted",
    dataType: "Boolean",
    description: "Indicates if the instance user is deleted",
    example: false,
    default: false,
    type: "instanceUser",
  },
  {
    id: 15,
    timestamp: "timestamps",
    dataType: "Boolean",
    desc: "Automatically adds createdAt and updatedAt fields to the schema.",
    default_value: true,
    type: "instanceUser",
  },
];

// labelSchema

const labelSchemaArray = [
  {
    key: "id",
    dataType: "Number",
    description: "Auto-incremented ID",
    example: 1,
    type: "label",
  },
  {
    key: "name",
    dataType: "String",
    description: "Label name",
    example: "Important",
    type: "label",
  },
  {
    key: "color",
    dataType: "String",
    description: "Label color",
    example: "#FF0000",
    type: "label",
  },
  {
    key: "count",
    dataType: "Number",
    description: "Count of labels",
    example: 10,
    default: 0,
    type: "label",
  },
  {
    key: "partnerId",
    dataType: "mongoose.Schema.Types.ObjectId",
    description: "Partner ID",
    example: "60d0fe4f5311236168a109ca",
    default: null,
    type: "label",
  },
  {
    key: "adminId",
    dataType: "mongoose.Schema.Types.ObjectId",
    description: "Admin ID",
    example: "60d0fe4f5311236168a109cb",
    default: null,
    type: "label",
  },
  {
    key: "createdBy",
    dataType: "Object",
    description: "Information about the user who created the label",
    example: '{ "name": "aman", "position": "admin" }',
    details: [
      {
        key: "name",
        dataType: "String",
        description: "Name of the user",
        example: "Aman",
      },
      {
        key: "position",
        dataType: "String (enum)",
        description: "Position of the user",
        example: "admin",
        enumValues: ["admin", "partner"],
      },
    ],
    type: "label",
  },
  {
    key: "noOfUsers",
    dataType: "Number",
    description: "Number of users on which this label applied",
    example: 5,
    type: "label",
  },
  {
    key: "isActive",
    dataType: "Boolean",
    description: "Indicates if the label is active",
    example: true,
    default: true,
    type: "label",
  },
  {
    key: "isDeleted",
    dataType: "Boolean",
    description: "Indicates if the label is deleted",
    example: false,
    default: false,
    type: "label",
  },
  {
    timestamp: "timestamps",
    default_value: true,
    desc: "Automatically adds createdAt and updatedAt fields to the schema.",
    type: "label",
  },
];

// partner

const partner = [
  {
    key: "id",
    dataType: "Number",
    description: "Auto-incremented id",
    example: 1,
    type: "partner",
  },
  {
    key: "name",
    dataType: "String",
    description: "Name of the customer",
    example: "John Doe",
    type: "partner",
  },
  {
    key: "countryCode",
    dataType: "String",
    description: "Country code for the customer's mobile number",
    example: "+91",
    default: "+91",
    type: "partner",
  },
  {
    key: "mobile",
    dataType: "String",
    description: "Mobile number of the customer",
    example: "9876543210",
    type: "partner",
  },
  {
    key: "email",
    dataType: "String",
    description: "Email address of the customer",
    example: "john.doe@example.com",
    type: "partner",
  },
  {
    key: "role",
    dataType: "String",
    description: "Role of the customer",
    example: "Admin",
    type: "partner",
  },
  {
    key: "createdBy",
    dataType: "String",
    description: "Creator of the customer account",
    example: "admin@example.com",
    type: "partner",
  },
  {
    key: "companyName",
    dataType: "String",
    description: "Company name of the customer",
    example: "Acme Corp",
    type: "partner",
  },
  {
    key: "lastLogin",
    dataType: "Date",
    description: "Last login date of the customer",
    example: "2023-01-15T10:00:00Z",
    type: "partner",
  },
  {
    key: "label",
    dataType: "String",
    description: "Label assigned to the customer",
    example: "VIP",
    type: "partner",
  },
  {
    key: "password",
    dataType: "String",
    description: "Password for the customer's account",
    example: "hashed_password",
    type: "partner",
  },
  {
    key: "partnerType",
    dataType: "String (enum)",
    description: "Type of partner",
    example: "partner",
    enumValues: ["partner", "subUser", "white label"],
    default: "partner",
    type: "partner",
  },
  {
    key: "country",
    dataType: "String",
    description: "Country of the customer",
    example: "India",
    type: "partner",
  },
  {
    key: "state",
    dataType: "String",
    description: "State of the customer",
    example: "New York",
    type: "partner",
  },
  {
    key: "zone",
    dataType: "String",
    description: "Zone of the customer",
    example: "East",
    type: "partner",
  },
  {
    key: "category",
    dataType: "String",
    description: "Category of the customer",
    example: "Enterprise",
    type: "partner",
  },
  {
    key: "pincode",
    dataType: "Number",
    description: "Pin code of the customer",
    example: 123456,
    type: "partner",
  },
  {
    key: "district",
    dataType: "String",
    description: "District of the customer",
    example: "DistrictName",
    type: "partner",
  },
  {
    key: "pipeDriveUrl",
    dataType: "String",
    description: "PipeDrive URL of the customer",
    example: "https://example.pipedrive.com",
    type: "partner",
  },
  {
    key: "proactive",
    dataType: "String",
    description: "Proactive details",
    example: "Proactive Description",
    type: "partner",
  },
  {
    key: "salesTeamSize",
    dataType: "Number",
    description: "Size of the sales team",
    example: 10,
    type: "partner",
  },
  {
    key: "supportTeamSize",
    dataType: "Number",
    description: "Size of the support team",
    example: 5,
    type: "partner",
  },
  {
    key: "accountManagerId",
    dataType: "mongoose.Schema.Types.ObjectId",
    description: "ID of the account manager",
    example: "60d0fe4f5311236168a109ca",
    default: null,
    type: "partner",
  },
  {
    key: "accountManager",
    dataType: "String",
    description: "Name of the account manager",
    example: "John Doe",
    type: "partner",
  },
  {
    key: "subUser",
    dataType: "Boolean",
    description: "Indicates if the customer is a sub-user",
    example: false,
    default: false,
    type: "partner",
  },
  {
    key: "minOrderValue",
    dataType: "Number",
    description: "Minimum order value",
    example: 50000,
    default: 50000,
    type: "partner",
  },
  {
    key: "maxTrialLimit",
    dataType: "Number",
    description: "Maximum trial limit",
    example: 3,
    default: 3,
    type: "partner",
  },
  {
    key: "mrrTillFeb",
    dataType: "Number",
    description: "Monthly recurring revenue till February",
    example: 0,
    default: 0,
    type: "partner",
  },
  {
    key: "accessibleUserIds",
    dataType: "Array",
    description: "Array of accessible user IDs",
    example: "[ 'user1', 'user2' ]",
    type: "partner",
  },
  {
    key: "label",
    dataType: "Object",
    description: "Label details",
    type: "partner",
    details: [
      {
        key: "id",
        dataType: "mongoose.Schema.Types.ObjectId",
        description: "Label ID",
        type: "partner",
      },
      {
        key: "name",
        dataType: "String",
        description: "Label name",
        type: "partner",
      },
      {
        key: "color",
        dataType: "String",
        description: "Label color",
        type: "partner",
      },
    ],
  },
  {
    key: "logo",
    dataType: "String",
    description: "Logo URL",
    type: "partner",
  },
  {
    key: "contact",
    dataType: "Object",
    description: "Contact details",
    type: "partner",
    details: [
      {
        key: "sales",
        dataType: "String",
        description: "Sales contact information",
        type: "partner",
      },
      {
        key: "support",
        dataType: "String",
        description: "Support contact information",
        type: "partner",
      },
    ],
  },
  {
    key: "isActive",
    dataType: "Boolean",
    description: "Indicates if the partner is active",
    example: true,
    default: true,
    type: "partner",
  },
  {
    key: "isDeleted",
    dataType: "Boolean",
    description: "Indicates if the partner is deleted",
    example: false,
    default: false,
    type: "partner",
  },
  {
    key: "isSSL",
    dataType: "Boolean",
    description: "Indicates if SSL is enabled",
    example: false,
    default: false,
    type: "partner",
  },
  {
    timestamp: "timestamps",
    default_value: true,
    desc: "Automatically adds createdAt and updatedAt fields to the schema.",
    type: "partner",
  },
];

// partnerlog

const partnerLogSchemaArray = [
  {
    key: "url",
    dataType: "String",
    description: "URL",
    example: "https://api.example.com",
    type: "partnerlog",
  },
  {
    key: "method",
    dataType: "String",
    description: "HTTP method",
    example: "GET",
    type: "partnerlog",
  },
  {
    key: "payload",
    dataType: "Object",
    description: "Payload data",
    example: { data: "example payload" },
    type: "partnerlog",
  },
  {
    key: "response",
    dataType: "Object",
    description: "Response data",
    example: { status: 200, message: "OK" },
    type: "partnerlog",
  },
  {
    key: "description",
    dataType: "String",
    description: "Description",
    example: "API request for user authentication",
    type: "partnerlog",
  },
  {
    key: "userInfo",
    dataType: "Object",
    description: "User information",
    example: { userId: "123456", username: "john_doe" },
    type: "partnerlog",
  },
  {
    timestamp: "timestamps",
    default_value: true,
    desc: "Automatically adds createdAt and updatedAt fields to the schema.",
    type: "partnerlog",
  },
];

// payment schema

const paymentSchemaArray = [
  {
    key: "id",
    dataType: "Number",
    description: "Auto-incremented id",
    example: 1,
    type: "payment",
  },
  {
    key: "orderId",
    dataType: "String",
    description: "Order ID",
    example: "ORDER123",
    type: "payment",
  },
  {
    key: "orderStatus",
    dataType: "String",
    description: "Status of the order",
    example: "Pending",
    type: "payment",
  },
  {
    key: "trackingId",
    dataType: "String",
    description: "Tracking ID",
    example: "TRACK123",
    type: "payment",
  },
  {
    key: "bankRefNo",
    dataType: "String",
    description: "Bank reference number",
    example: "REF123",
    type: "payment",
  },
  {
    key: "failureMessage",
    dataType: "String",
    description: "Failure message",
    example: "Transaction failed",
    type: "payment",
  },
  {
    key: "paymentMode",
    dataType: "String",
    description: "Payment mode",
    example: "Credit Card",
    type: "payment",
  },
  {
    key: "cardName",
    dataType: "String",
    description: "Name on the card",
    example: "John Doe",
    type: "payment",
  },
  {
    key: "statusCode",
    dataType: "String",
    description: "Status code",
    example: "200",
    type: "payment",
  },
  {
    key: "statusMessage",
    dataType: "String",
    description: "Status message",
    example: "Success",
    type: "payment",
  },
  {
    key: "extraDays",
    dataType: "Number",
    description: "Extra days",
    example: 5,
    type: "payment",
  },
  {
    key: "currency",
    dataType: "String",
    description: "Currency",
    example: "USD",
    type: "payment",
  },
  {
    key: "amount",
    dataType: "String",
    description: "Amount",
    example: "100.00",
    type: "payment",
  },
  {
    key: "merchantAmount",
    dataType: "String",
    description: "Merchant amount",
    example: "90.00",
    type: "payment",
  },
  {
    key: "customerId",
    dataType: "mongoose.Schema.Types.ObjectId",
    description: "Customer ID",
    example: "60d0fe4f5311236168a109ca",
    default: null,
    type: "payment",
  },
  {
    key: "partnerId",
    dataType: "mongoose.Schema.Types.ObjectId",
    description: "Partner ID",
    example: "60d0fe4f5311236168a109ca",
    default: null,
    type: "payment",
  },
  {
    key: "subscriptionId",
    dataType: "mongoose.Schema.Types.ObjectId",
    description: "Subscription ID",
    example: "60d0fe4f5311236168a109ca",
    default: null,
    type: "payment",
  },
  {
    key: "subId",
    dataType: "String",
    description: "Subscription ID",
    example: "SUB123",
    type: "payment",
  },
  {
    key: "tanNumber",
    dataType: "String",
    description: "TAN number",
    example: "TAN123",
    type: "payment",
  },
  {
    key: "deductedAmount",
    dataType: "Number",
    description: "Deducted amount",
    example: 10.0,
    type: "payment",
  },
  {
    key: "offerType",
    dataType: "String",
    description: "Offer type",
    example: "Discount",
    type: "payment",
  },
  {
    key: "offerCode",
    dataType: "String",
    description: "Offer code",
    example: "OFF123",
    type: "payment",
  },
  {
    key: "discountValue",
    dataType: "String",
    description: "Discount value",
    example: "10%",
    type: "payment",
  },
  {
    key: "retry",
    dataType: "String",
    description: "Retry",
    example: "Yes",
    type: "payment",
  },
  {
    key: "responseCode",
    dataType: "String",
    description: "Response code",
    example: "200",
    type: "payment",
  },
  {
    key: "billingNotes",
    dataType: "String",
    description: "Billing notes",
    example: "Additional billing information",
    type: "payment",
  },
  {
    key: "transDate",
    dataType: "String",
    description: "Transaction date",
    example: "2023-01-15",
    type: "payment",
  },
  {
    key: "reqForStatusCheck",
    dataType: "Number",
    description: "Request for status check",
    example: 1,
    default: 0,
    type: "payment",
  },
  {
    key: "discountApplied",
    dataType: "Boolean",
    description: "Indicates if discount applied",
    example: true,
    default: false,
    type: "payment",
  },
  {
    key: "invoiceCreated",
    dataType: "Boolean",
    description: "Indicates if invoice created",
    example: true,
    default: false,
    type: "payment",
  },
  {
    key: "invoiceUrl",
    dataType: "String",
    description: "Invoice URL",
    example: "https://example.com/invoice",
    type: "payment",
  },
  {
    key: "priceAdd",
    dataType: "Number",
    description: "Price addition",
    example: 20.0,
    default: 0,
    type: "payment",
  },
  {
    key: "currentUsers",
    dataType: "Number",
    description: "Current number of users",
    example: 100,
    default: 0,
    type: "payment",
  },
  {
    key: "extraCharge",
    dataType: "Number",
    description: "Extra charge",
    example: 5.0,
    default: 0,
    type: "payment",
  },
  {
    key: "endDate",
    dataType: "Date",
    description: "End date",
    example: "2023-12-31",
    default: null,
    type: "payment",
  },
  {
    key: "recievedAmount",
    dataType: "Number",
    description: "Received amount",
    example: 90.0,
    default: 0,
    type: "payment",
  },
  {
    key: "paidAmount",
    dataType: "Number",
    description: "Paid amount",
    example: 100.0,
    default: 0,
    type: "payment",
  },
  {
    key: "statusUpdatedBy",
    dataType: "String",
    description: "User who updated the status",
    default: "",
    type: "payment",
  },
  {
    key: "remark",
    dataType: "String",
    description: "Remark",
    type: "payment",
  },
  {
    key: "billing",
    dataType: "Object",
    description: "Billing details",
    type: "payment",
    details: [
      {
        key: "name",
        dataType: "String",
        description: "Name",
        type: "payment",
      },
      {
        key: "mobile",
        dataType: "String",
        description: "Mobile",
        type: "payment",
      },
      {
        key: "email",
        dataType: "String",
        description: "Email",
        type: "payment",
      },
      {
        key: "address",
        dataType: "String",
        description: "Address",
        type: "payment",
      },
      {
        key: "pinCode",
        dataType: "String",
        description: "Pin code",
        type: "payment",
      },
      {
        key: "gstInNo",
        dataType: "String",
        description: "GSTIN",
        type: "payment",
      },
      {
        key: "panCardNo",
        dataType: "String",
        description: "PAN card number",
        type: "payment",
      },
      {
        key: "companyName",
        dataType: "String",
        description: "Company name",
        type: "payment",
      },
      {
        key: "city",
        dataType: "String",
        description: "City",
        type: "payment",
      },
      {
        key: "state",
        dataType: "String",
        description: "State",
        type: "payment",
      },
      {
        key: "stateName",
        dataType: "String",
        description: "State name",
        type: "payment",
      },
      {
        key: "country",
        dataType: "String",
        description: "Country",
        type: "payment",
      },
      {
        key: "gstTreatment",
        dataType: "String",
        description: "GST treatment",
        type: "payment",
      },
      {
        key: "registeredCompanyName",
        dataType: "String",
        description: "Registered company name",
        type: "payment",
      },
    ],
  },
  {
    key: "plan",
    dataType: "Object",
    description: "Plan details",
    type: "payment",
    details: [
      {
        key: "name",
        dataType: "String",
        description: "Name",
        type: "payment",
      },
      {
        key: "noOfUsers",
        dataType: "Number",
        description: "Number of users",
        type: "payment",
      },
      {
        key: "unitPrice",
        dataType: "Number",
        description: "Unit price",
        type: "payment",
      },
      {
        key: "price",
        dataType: "Number",
        description: "Price",
        type: "payment",
      },
      {
        key: "description",
        dataType: "String",
        description: "Description",
        type: "payment",
      },
      {
        key: "billingCycle",
        dataType: "String",
        description: "Billing cycle",
        type: "payment",
      },
      {
        key: "billEvery",
        dataType: "Number",
        description: "Bill every",
        type: "payment",
      },
      {
        key: "code",
        dataType: "String",
        description: "Code",
        type: "payment",
      },
    ],
  },
  {
    timestamp: "timestamps",
    default_value: true,
    desc: "Automatically adds createdAt and updatedAt fields to the schema.",
    type: "payment",
  },
];

// plan schema

const planSchemaArray = [
  {
    key: "id",
    dataType: "Number",
    description: "Auto-incremented id",
    example: 1,
    type: "plan",
  },
  {
    key: "name",
    dataType: "String",
    description: "Name of the plan",
    example: "Basic Plan",
    type: "plan",
  },
  {
    key: "partnerId",
    dataType: "mongoose.Schema.Types.ObjectId",
    description: "ID of the partner associated with the plan",
    example: "60d0fe4f5311236168a109ca",
    default: null,
    type: "plan",
  },
  {
    key: "customer",
    dataType: "Array",
    description: "List of customers associated with the plan",
    type: "plan",
    details: [
      {
        key: "id",
        dataType: "mongoose.Schema.Types.ObjectId",
        description: "Customer ID",
        type: "plan",
      },
      {
        key: "name",
        dataType: "String",
        description: "Customer name",
        type: "plan",
      },
    ],
  },
  {
    key: "isYearly",
    dataType: "Boolean",
    description: "Indicates if the plan is yearly",
    example: false,
    default: false,
    type: "plan",
  },
  {
    key: "isMonthly",
    dataType: "Boolean",
    description: "Indicates if the plan is monthly",
    example: false,
    default: false,
    type: "plan",
  },
  {
    key: "createdBy",
    dataType: "String",
    description: "Creator of the plan",
    example: "admin@example.com",
    type: "plan",
  },
  {
    key: "price",
    dataType: "Number",
    description: "Price of the plan",
    example: 100,
    type: "plan",
  },
  {
    key: "planType",
    dataType: "String (enum)",
    description: "Type of plan",
    example: "homePlan",
    enumValues: ["homePlan", "businessPlan", "deepFreezePlan"],
    type: "plan",
  },
  {
    key: "noOfUsers",
    dataType: "Number",
    description: "Number of users allowed in the plan",
    example: 5,
    type: "plan",
  },
  {
    key: "activityLogs",
    dataType: "Array",
    description: "Activity logs related to the plan",
    type: "plan",
    details: [
      {
        key: "updatedBy",
        dataType: "String",
        description: "User who updated the plan",
        type: "plan",
      },
      {
        key: "updateDate",
        dataType: "Date",
        description: "Date of update",
        type: "plan",
      },
    ],
  },
  {
    key: "isActive",
    dataType: "Boolean",
    description: "Indicates if the plan is active",
    example: true,
    default: true,
    type: "plan",
  },
  {
    key: "isDeleted",
    dataType: "Boolean",
    description: "Indicates if the plan is deleted",
    example: false,
    default: false,
    type: "plan",
  },
  {
    timestamp: "timestamps",
    default_value: true,
    desc: "Automatically adds createdAt and updatedAt fields to the schema.",
    type: "plan",
  },
];

// product schema

const productSchemaArray = [
  {
    key: "id",
    dataType: "Number",
    description: "Auto-incremented id",
    example: 1,
    type: "product",
  },
  {
    key: "name",
    dataType: "String",
    description: "Name of the product",
    example: "Product X",
    type: "product",
  },
  {
    key: "description",
    dataType: "String",
    description: "Description of the product",
    example: "This is a description of Product X",
    type: "product",
  },
  {
    key: "plans",
    dataType: "Array",
    description: "List of plans associated with the product",
    type: "product",
    details: [
      {
        key: "name",
        dataType: "String",
        description: "Name of the plan",
        type: "product",
      },
      {
        key: "code",
        dataType: "String",
        description: "Code of the plan",
        type: "product",
      },
      {
        key: "unit",
        dataType: "String",
        description: "Unit of the plan",
        type: "product",
      },
      {
        key: "price",
        dataType: "Number",
        description: "Price of the plan",
        type: "product",
      },
      {
        key: "description",
        dataType: "String",
        description: "Description of the plan",
        type: "product",
      },
      {
        key: "billEvery",
        dataType: "Number",
        description: "Billing frequency of the plan",
        type: "product",
      },
      {
        key: "billingCycle",
        dataType: "String",
        description: "Billing cycle of the plan",
        type: "product",
      },
      {
        key: "autoRenewal",
        dataType: "Boolean",
        description: "Indicates if the plan has auto-renewal",
        example: false,
        default: false,
        type: "product",
      },
      {
        key: "isShow",
        dataType: "Boolean",
        description: "Indicates if the plan is to be displayed",
        example: false,
        default: false,
        type: "product",
      },
    ],
  },
  {
    key: "addOns",
    dataType: "Array",
    description: "List of add-ons associated with the product",
    type: "product",
    details: [
      {
        key: "name",
        dataType: "String",
        description: "Name of the add-on",
        type: "product",
      },
      {
        key: "code",
        dataType: "String",
        description: "Code of the add-on",
        type: "product",
      },
      {
        key: "description",
        dataType: "String",
        description: "Description of the add-on",
        type: "product",
      },
      {
        key: "unit",
        dataType: "String",
        description: "Unit of the add-on",
        type: "product",
      },
      {
        key: "price",
        dataType: "Number",
        description: "Price of the add-on",
        type: "product",
      },
      {
        key: "type",
        dataType: "String (enum)",
        description: "Type of the add-on",
        example: "oneTime",
        enumValues: ["oneTime", "recurring"],
        type: "product",
      },
      {
        key: "pricingEvery",
        dataType: "Number",
        description: "Pricing frequency of the add-on",
        type: "product",
      },
      {
        key: "pricingInterval",
        dataType: "String",
        description: "Pricing interval of the add-on",
        type: "product",
      },
    ],
  },
  {
    key: "isActive",
    dataType: "Boolean",
    description: "Indicates if the product is active",
    example: true,
    default: true,
    type: "product",
  },
  {
    key: "isDeleted",
    dataType: "Boolean",
    description: "Indicates if the product is deleted",
    example: false,
    default: false,
    type: "product",
  },
  {
    timestamp: "timestamps",
    default_value: true,
    desc: "Automatically adds createdAt and updatedAt fields to the schema.",
    type: "product",
  },
];

// server schema

const serverSchemaArray = [
  {
    key: "id",
    dataType: "Number",
    description: "Auto-incremented id",
    example: 1,
    type: "server",
  },
  {
    key: "name",
    dataType: "String",
    description: "Name of the server",
    example: "Server X",
    type: "server",
  },
  {
    key: "ip",
    dataType: "String",
    description: "IP address of the server",
    example: "192.168.1.1",
    type: "server",
  },
  {
    key: "publicIp",
    dataType: "String",
    description: "Public IP address of the server",
    example: "203.0.113.0",
    type: "server",
  },
  {
    key: "port",
    dataType: "Number",
    description: "Port number of the server",
    example: 8080,
    type: "server",
  },
  {
    key: "description",
    dataType: "String",
    description: "Description of the server",
    example: "This is a description of Server X",
    type: "server",
  },
  {
    key: "domainName",
    dataType: "String",
    description: "Domain name associated with the server",
    example: "example.com",
    type: "server",
  },
  {
    key: "createdBy",
    dataType: "String",
    description: "Creator of the server",
    example: "admin@example.com",
    type: "server",
  },
  {
    key: "partnerId",
    dataType: "mongoose.Schema.Types.ObjectId",
    description: "ID of the partner associated with the server",
    example: "60d0fe4f5311236168a109ca",
    default: null,
    type: "server",
  },
  {
    key: "isFilled",
    dataType: "Boolean",
    description: "Indicates if the server is filled",
    example: false,
    default: false,
    type: "server",
  },
  {
    key: "isTrial",
    dataType: "Boolean",
    description: "Indicates if the server is a trial",
    example: false,
    default: false,
    type: "server",
  },
  {
    key: "isMargCloud",
    dataType: "Boolean",
    description: "Indicates if the server is on MargCloud",
    example: false,
    default: false,
    type: "server",
  },
  {
    key: "isActive",
    dataType: "Boolean",
    description: "Indicates if the server is active",
    example: true,
    default: true,
    type: "server",
  },
  {
    key: "isDeleted",
    dataType: "Boolean",
    description: "Indicates if the server is deleted",
    example: false,
    default: false,
    type: "server",
  },
  {
    timestamp: "timestamps",
    default_value: true,
    desc: "Automatically adds createdAt and updatedAt fields to the schema.",
    type: "server",
  },
];

// subScrip log

const subscriptionLogSchemaArray = [
  {
    key: "id",
    dataType: "Number",
    description: "Auto-incremented id",
    example: 1,
    type: "subscriptionLog",
  },
  {
    key: "subscriptionId",
    dataType: "mongoose.Schema.Types.ObjectId",
    description: "ID of the subscription associated with the log",
    example: "60d0fe4f5311236168a109ca",
    default: null,
    type: "subscriptionLog",
  },
  {
    key: "code",
    dataType: "String",
    description: "Code related to the subscription log",
    example: "SUB_LOG_001",
    type: "subscriptionLog",
  },
  {
    key: "description",
    dataType: "String",
    description: "Description of the subscription log",
    example: "Subscription renewal",
    type: "subscriptionLog",
  },
  {
    key: "remark",
    dataType: "String",
    description: "Remarks for the subscription log",
    example: "Renewed successfully",
    type: "subscriptionLog",
  },
  {
    key: "taskBy",
    dataType: "Object",
    description: "Details of the user/task executor",
    type: "subscriptionLog",
    details: [
      {
        key: "name",
        dataType: "String",
        description: "Name of the user/task executor",
        example: "John Doe",
        type: "subscriptionLog",
      },
      {
        key: "email",
        dataType: "String",
        description: "Email of the user/task executor",
        example: "john.doe@example.com",
        type: "subscriptionLog",
      },
    ],
  },
  {
    timestamp: "timestamps",
    default_value: true,
    desc: "Automatically adds createdAt and updatedAt fields to the schema.",
    type: "subscriptionLog",
  },
];

// sub schema

const subscriptionSchema = [
  {
    key: "id",
    dataType: "Number",
    description: "Auto-incremented id",
    example: 1,
    type: "subscription",
  },
  {
    key: "customerId",
    dataType: "mongoose.Schema.Types.ObjectId",
    description: "ID of the customer",
    default: null,
    example: "60d0fe4f5311236168a109ca",
    type: "subscription",
  },
  {
    key: "partnerId",
    dataType: "mongoose.Schema.Types.ObjectId",
    description: "ID of the partner",
    default: null,
    example: "60d0fe4f5311236168a109cb",
    type: "subscription",
  },
  {
    key: "productName",
    dataType: "String",
    description: "Name of the product",
    example: "Premium Plan",
    type: "subscription",
  },
  {
    key: "code",
    dataType: "String",
    description: "Subscription code",
    example: "SUB123",
    type: "subscription",
  },
  {
    key: "referenceId",
    dataType: "String",
    description: "Reference ID",
    example: "REF456",
    type: "subscription",
  },
  {
    key: "startDate",
    dataType: "Date",
    description: "Start date of the subscription",
    default: null,
    example: "2024-06-01",
    type: "subscription",
  },
  {
    key: "paidSubDate",
    dataType: "Date",
    description: "Paid subscription date",
    default: null,
    example: "2024-06-01",
    type: "subscription",
  },
  {
    key: "lastRenewDate",
    dataType: "Date",
    description: "Last renewal date",
    default: null,
    example: "2025-06-01",
    type: "subscription",
  },
  {
    key: "endDate",
    dataType: "Date",
    description: "End date of the subscription",
    example: "2025-06-01",
    type: "subscription",
  },
  {
    key: "salesPerson",
    dataType: "Object",
    description: "Sales person details",
    details: [
      {
        key: "id",
        dataType: "mongoose.Schema.Types.ObjectId",
        description: "ID of the sales person",
        default: null,
        example: "60d0fe4f5311236168a109cc",
        type: "subscription",
      },
      {
        key: "name",
        dataType: "String",
        description: "Name of the sales person",
        example: "John Doe",
        type: "subscription",
      },
    ],
    type: "subscription",
  },
  {
    key: "relationshipManager",
    dataType: "Object",
    description: "Relationship manager details",
    details: [
      {
        key: "id",
        dataType: "mongoose.Schema.Types.ObjectId",
        description: "ID of the relationship manager",
        default: null,
        example: "60d0fe4f5311236168a109cd",
        type: "subscription",
      },
      {
        key: "name",
        dataType: "String",
        description: "Name of the relationship manager",
        example: "Jane Smith",
        type: "subscription",
      },
    ],
    type: "subscription",
  },
  {
    key: "isAutoRenew",
    dataType: "Boolean",
    description: "Indicates if the subscription is set to auto-renew",
    default: false,
    example: true,
    type: "subscription",
  },
  {
    key: "plan",
    dataType: "Object",
    description: "Subscription plan details",
    details: [
      {
        key: "name",
        dataType: "String",
        description: "Name of the plan",
        example: "Basic",
        type: "subscription",
      },
      {
        key: "noOfUsers",
        dataType: "Number",
        description: "Number of users included in the plan",
        example: 5,
        type: "subscription",
      },
      {
        key: "unitPrice",
        dataType: "Number",
        description: "Unit price of the plan",
        example: 50,
        type: "subscription",
      },
      {
        key: "price",
        dataType: "Number",
        description: "Total price of the plan",
        example: 250,
        type: "subscription",
      },
      {
        key: "description",
        dataType: "String",
        description: "Description of the plan",
        example: "Includes basic features",
        type: "subscription",
      },
      {
        key: "billingCycle",
        dataType: "String",
        description: "Billing cycle of the plan",
        example: "Monthly",
        type: "subscription",
      },
      {
        key: "billEvery",
        dataType: "Number",
        description: "Billing frequency",
        example: 1,
        type: "subscription",
      },
      {
        key: "code",
        dataType: "String",
        description: "Code of the plan",
        example: "BASIC123",
        type: "subscription",
      },
    ],
    type: "subscription",
  },
  {
    key: "newUnitPrice",
    dataType: "Number",
    description: "New unit price",
    default: 0,
    example: 99.99,
    type: "subscription",
  },
  {
    key: "pipedriveDealId",
    dataType: "Number",
    description: "Pipedrive deal ID",
    example: 123456789,
    type: "subscription",
  },
  {
    key: "addOn",
    dataType: "Object",
    description: "Add-on details",
    details: [
      {
        key: "name",
        dataType: "String",
        description: "Name of the add-on",
        example: "Extra Storage",
        type: "subscription",
      },
      {
        key: "quantity",
        dataType: "Number",
        description: "Quantity of the add-on",
        example: 1,
        type: "subscription",
      },
      {
        key: "description",
        dataType: "String",
        description: "Description of the add-on",
        example: "Additional 10GB storage",
        type: "subscription",
      },
      {
        key: "unit",
        dataType: "String",
        description: "Unit of the add-on",
        example: "GB",
        type: "subscription",
      },
      {
        key: "price",
        dataType: "Number",
        description: "Price of the add-on",
        example: 9.99,
        type: "subscription",
      },
    ],
    type: "subscription",
  },
  {
    key: "subscriptionLogs",
    dataType: "Array",
    description: "Subscription logs",
    details: [
      {
        key: "autoRenewDate",
        dataType: "Date",
        description: "Auto-renew date",
        example: "2024-06-01",
        type: "subscription",
      },
      {
        key: "autoRenewAmount",
        dataType: "Number",
        description: "Auto-renew amount",
        example: 99.99,
        type: "subscription",
      },
    ],
    type: "subscription",
  },
  {
    key: "customerEmail",
    dataType: "String",
    description: "Customer email",
    example: "customer@example.com",
    type: "subscription",
  },
  {
    key: "isRenew",
    dataType: "Boolean",
    description: "Indicates if the subscription is renewed",
    default: false,
    example: true,
    type: "subscription",
  },
  {
    key: "isTrial",
    dataType: "Boolean",
    description: "Indicates if the subscription is a trial",
    default: false,
    example: true,
    type: "subscription",
  },
  {
    key: "activate",
    dataType: "Boolean",
    description: "Indicates if the subscription is activated",
    default: false,
    example: true,
    type: "subscription",
  },
  {
    key: "isActive",
    dataType: "Boolean",
    description: "Indicates if the subscription is active",
    default: true,
    example: true,
    type: "subscription",
  },
  {
    key: "isDeleted",
    dataType: "Boolean",
    description: "Indicates if the subscription is deleted",
    default: false,
    example: false,
    type: "subscription",
  },
  {
    key: "isExpired",
    dataType: "Boolean",
    description: "Indicates if the subscription is expired",
    default: false,
    example: false,
    type: "subscription",
  },
  {
    key: "restricted",
    dataType: "Boolean",
    description: "Indicates if the subscription is restricted",
    default: false,
    example: false,
    type: "subscription",
  },
  {
    key: "subUnderProcess",
    dataType: "Boolean",
    description: "Indicates if the subscription is under process",
    default: false,
    example: false,
    type: "subscription",
  },
  {
    key: "isDiscount",
    dataType: "Boolean",
    description: "Indicates if a discount is applied",
    default: false,
    example: true,
    type: "subscription",
  },
  {
    key: "discountApplied",
    dataType: "Boolean",
    description: "Indicates if a discount is applied",
    default: false,
    example: true,
    type: "subscription",
  },
  {
    key: "currentMRR",
    dataType: "Number",
    description: "Current monthly recurring revenue",
    default: 0,
    example: 499.99,
    type: "subscription",
  },
  {
    key: "startingMRR",
    dataType: "Number",
    description: "Starting monthly recurring revenue",
    default: 0,
    example: 499.99,
    type: "subscription",
  },
  {
    key: "discount",
    dataType: "Object",
    description: "Discount details",
    details: [
      {
        key: "plan",
        dataType: "Object",
        description: "Plan details",
        example: {
          name: "Gold Plan",
          noOfUsers: 20,
          unitPrice: 99.99,
          price: 1999.8,
          description: "Discounted Gold Plan",
          billingCycle: "monthly",
          billEvery: 1,
          code: "GOLD2024",
        },
        type: "subscription",
      },
      {
        key: "minUsers",
        dataType: "Number",
        description: "Minimum number of users",
        example: 10,
        type: "subscription",
      },
      {
        key: "lastDiscountDate",
        dataType: "Date",
        description: "Last discount date",
        example: "2024-05-31",
        type: "subscription",
      },
      {
        key: "discountAmount",
        dataType: "Number",
        description: "Discount amount",
        example: 100.0,
        type: "subscription",
      },
      {
        key: "discountType",
        dataType: "String",
        description: "Discount type",
        example: "percentage",
        type: "subscription",
      },
    ],
    type: "subscription",
  },

  {
    timestamp: "timestamps",
    default_value: true,
    desc: "Automatically adds createdAt and updatedAt fields to the schema.",
    type: "subscription",
  },
];

// tally data

const tallyDataSchema = [
  {
    key: "id",
    dataType: "Number",
    description: "Auto-incremented id",
    example: 1,
    type: "tallyData",
  },
  {
    key: "cloudName",
    dataType: "String",
    description: "Cloud name",
    example: "AWS",
    type: "tallyData",
  },
  {
    key: "drive",
    dataType: "String",
    description: "Drive",
    example: "C:",
    type: "tallyData",
  },
  {
    key: "OS",
    dataType: "String",
    description: "Operating system",
    example: "Windows 10",
    type: "tallyData",
  },
  {
    key: "application",
    dataType: "String",
    description: "Application",
    example: "Tally ERP 9",
    type: "tallyData",
  },
  {
    key: "tallyVersion",
    dataType: "String",
    description: "Tally version",
    example: "Release 6.6",
    type: "tallyData",
  },
  {
    key: "applicationPath",
    dataType: "String",
    description: "Application path",
    example: "/Program Files/Tally",
    type: "tallyData",
  },
  {
    key: "serialNumber",
    dataType: "String",
    description: "Serial number",
    example: "1234567890",
    type: "tallyData",
  },
  {
    key: "edition",
    dataType: "String",
    description: "Edition",
    example: "Silver",
    type: "tallyData",
  },
  {
    key: "tallySoftwareServices",
    dataType: "String",
    description: "Tally software services",
    example: "TSS Gold",
    type: "tallyData",
  },
  {
    key: "licenseAdministratorEmail",
    dataType: "String",
    description: "License administrator email",
    example: "admin@example.com",
    type: "tallyData",
  },
  {
    key: "tallyGatewayServer",
    dataType: "String",
    description: "Tally gateway server",
    example: "gateway.example.com",
    type: "tallyData",
  },
  {
    key: "TDL",
    dataType: "String",
    description: "TDL",
    example: "custom_tdl.tdl",
    type: "tallyData",
  },
  {
    key: "subId",
    dataType: "String",
    description: "Subscription ID",
    example: "SUB123456",
    type: "tallyData",
  },
  {
    key: "customerId",
    dataType: "mongoose.Schema.Types.ObjectId",
    description: "Customer ID",
    default: null,
    example: "60d0fe4f5311236168a109ca",
    type: "tallyData",
  },
  {
    key: "partnerId",
    dataType: "mongoose.Schema.Types.ObjectId",
    description: "Partner ID",
    default: null,
    example: "60d0fe4f5311236168a109cb",
    type: "tallyData",
  },
  {
    key: "partnerEmail",
    dataType: "String",
    description: "Partner email",
    example: "partner@example.com",
    type: "tallyData",
  },
  {
    key: "customerEmail",
    dataType: "String",
    description: "Customer email",
    example: "customer@example.com",
    type: "tallyData",
  },
  {
    timestamp: "timestamps",
    default_value: true,
    desc: "Automatically adds createdAt and updatedAt fields to the schema.",
    type: "tallyData",
  },
];

// tally version

const tallyVersionSchema = [
  {
    key: "id",
    dataType: "Number",
    description: "Auto-incremented id",
    example: 1,
    type: "tallyVersion",
  },
  {
    key: "versionName",
    dataType: "String",
    description: "Version name",
    example: "Tally ERP 9.0",
    type: "tallyVersion",
  },
  {
    key: "link",
    dataType: "String",
    description: "Download link",
    example: "https://example.com/tally_erp_9",
    type: "tallyVersion",
  },
  {
    key: "updateLink",
    dataType: "String",
    description: "Update tally release link",
    example: "https://example.com/tally_erp_9/update",
    type: "tallyVersion",
  },
  {
    key: "isActive",
    dataType: "Boolean",
    description: "Indicates if the tally version is active",
    example: true,
    default: true,
    type: "tallyVersion",
  },
  {
    key: "isDeleted",
    dataType: "Boolean",
    description: "Indicates if the tally version is deleted",
    example: false,
    default: false,
    type: "tallyVersion",
  },
];

// ticket schema

const ticketSchema = [
  {
    key: "id",
    dataType: "Number",
    description: "Auto-incremented id",
    example: 1,
    type: "ticket",
  },
  {
    key: "subject",
    dataType: "String",
    description: "Subject of the ticket",
    example: "Internet Connectivity Issue",
    type: "ticket",
  },
  {
    key: "issueType",
    dataType: "String",
    description: "Type of the issue",
    example: "Technical",
    type: "ticket",
  },
  {
    key: "issueSubType",
    dataType: "String",
    description: "Sub-type of the issue",
    example: "Connectivity",
    type: "ticket",
  },
  {
    key: "description",
    dataType: "String",
    description: "Description of the issue",
    example: "Unable to connect to the internet.",
    type: "ticket",
  },
  {
    key: "ticketId",
    dataType: "Number",
    description: "Ticket ID",
    example: 1001,
    type: "ticket",
  },
  {
    key: "mobile",
    dataType: "String",
    description: "Mobile number",
    example: "9876543210",
    type: "ticket",
  },
  {
    key: "customerId",
    dataType: "mongoose.Schema.Types.ObjectId",
    description: "ID of the customer",
    example: "6140e1b3b2a74c345e1636fd",
    default: null,
    type: "ticket",
  },
  {
    key: "partnerId",
    dataType: "mongoose.Schema.Types.ObjectId",
    description: "ID of the partner",
    example: "6140e1b3b2a74c345e1636fe",
    default: null,
    type: "ticket",
  },
  {
    key: "subscriptionId",
    dataType: "mongoose.Schema.Types.ObjectId",
    description: "ID of the subscription",
    example: "6140e1b3b2a74c345e1636ff",
    default: null,
    type: "ticket",
  },
  {
    key: "status",
    dataType: "Object",
    description: "Status of the ticket",
    example: {
      id: 1,
      color: "red",
      name: "Open",
    },
    type: "ticket",
  },
  {
    key: "createdBy",
    dataType: "String",
    description: "Creator of the ticket",
    example: "John Doe",
    type: "ticket",
  },
  {
    key: "rating",
    dataType: "Number",
    description: "Rating of the ticket",
    example: 4,
    type: "ticket",
  },
  {
    key: "feedback",
    dataType: "String",
    description: "Feedback on the ticket",
    example: "Excellent service!",
    type: "ticket",
  },
  {
    key: "isFeedback",
    dataType: "Boolean",
    description: "Indicates if feedback is provided",
    example: true,
    default: false,
    type: "ticket",
  },
  {
    key: "messages",
    dataType: "Array",
    description: "Messages related to the ticket",
    example: [
      {
        text: "Thank you for contacting support!",
        createdBy: "Support Team",
        createdAt: "2024-05-31T12:00:00Z",
      },
      {
        text: "We are investigating the issue.",
        createdBy: "John Doe",
        createdAt: "2024-05-31T12:15:00Z",
      },
    ],
    type: "ticket",
  },
  {
    timestamp: "timestamps",
    default_value: true,
    desc: "Automatically adds createdAt and updatedAt fields to the schema.",
    type: "ticket",
  },
];

// virtual Machine log

const virtualMachineLogSchema = [
  {
    key: "id",
    dataType: "Number",
    description: "Auto-incremented id",
    example: 1,
    type: "virtualMachineLog",
  },
  {
    key: "apiRequestPayload",
    dataType: "String",
    description: "API request payload",
    example: '{"vmId": 123, "action": "start"}',
    type: "virtualMachineLog",
  },
  {
    key: "apiResponse",
    dataType: "String",
    description: "API response",
    example: '{"status": "success"}',
    type: "virtualMachineLog",
  },
  {
    key: "apiRequestUrl",
    dataType: "String",
    description: "API request URL",
    example: "/api/v1/vm/start",
    type: "virtualMachineLog",
  },
  {
    key: "customer",
    dataType: "Object",
    description: "Customer details",
    example: {
      id: 1001,
      name: "ABC Company",
    },
    type: "virtualMachineLog",
  },
  {
    key: "partner",
    dataType: "Object",
    description: "Partner details",
    example: {
      id: 2001,
      name: "XYZ Partner",
    },
    type: "virtualMachineLog",
  },
  {
    key: "createdBy",
    dataType: "String",
    description: "Creator of the log",
    example: "John Doe",
    type: "virtualMachineLog",
  },
  {
    key: "isApi",
    dataType: "Boolean",
    description: "Indicates if it's an API log",
    example: true,
    default: true,
    type: "virtualMachineLog",
  },
  {
    timestamp: "timestamps",
    default_value: true,
    desc: "Automatically adds createdAt and updatedAt fields to the schema.",
    type: "virtualMachineLog",
  },
];

// {
//     timestamp: "timestamps",
//     default_value: true,
//     desc: "Automatically adds createdAt and updatedAt fields to the schema.",
//     type: "partnerlog",
//   },

//   timestamp: "timestamps",
//   default_value: true,
//   desc: "Automatically adds createdAt and updatedAt fields to the schema.",
//   type:"customerreport"
